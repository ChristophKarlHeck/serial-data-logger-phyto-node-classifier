# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SerialMail

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SerialMail(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SerialMail()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSerialMail(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SerialMail
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SerialMail
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 3
            from SerialMail.Value import Value
            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SerialMail
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerialMail
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # SerialMail
    def Classification(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SerialMail
    def ClassificationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SerialMail
    def ClassificationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerialMail
    def ClassificationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SerialMail
    def ClassificationActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SerialMail
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SerialMailStart(builder):
    builder.StartObject(4)

def Start(builder):
    SerialMailStart(builder)

def SerialMailAddInputs(builder, inputs):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)

def AddInputs(builder, inputs):
    SerialMailAddInputs(builder, inputs)

def SerialMailStartInputsVector(builder, numElems):
    return builder.StartVector(3, numElems, 1)

def StartInputsVector(builder, numElems):
    return SerialMailStartInputsVector(builder, numElems)

def SerialMailAddClassification(builder, classification):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classification), 0)

def AddClassification(builder, classification):
    SerialMailAddClassification(builder, classification)

def SerialMailStartClassificationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartClassificationVector(builder, numElems):
    return SerialMailStartClassificationVector(builder, numElems)

def SerialMailAddClassificationActive(builder, classificationActive):
    builder.PrependBoolSlot(2, classificationActive, 0)

def AddClassificationActive(builder, classificationActive):
    SerialMailAddClassificationActive(builder, classificationActive)

def SerialMailAddChannel(builder, channel):
    builder.PrependBoolSlot(3, channel, 0)

def AddChannel(builder, channel):
    SerialMailAddChannel(builder, channel)

def SerialMailEnd(builder):
    return builder.EndObject()

def End(builder):
    return SerialMailEnd(builder)
