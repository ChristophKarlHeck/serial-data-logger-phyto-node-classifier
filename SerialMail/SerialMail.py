# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SerialMail

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SerialMail(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SerialMail()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSerialMail(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SerialMail
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SerialMail
    def InputsCh0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 3
            from SerialMail.Value import Value
            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SerialMail
    def InputsCh0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerialMail
    def InputsCh0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # SerialMail
    def InputsCh1(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 3
            from SerialMail.Value import Value
            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SerialMail
    def InputsCh1Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerialMail
    def InputsCh1IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SerialMail
    def ClassificationCh0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SerialMail
    def ClassificationCh0AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SerialMail
    def ClassificationCh0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerialMail
    def ClassificationCh0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # SerialMail
    def ClassificationCh1(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SerialMail
    def ClassificationCh1AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SerialMail
    def ClassificationCh1Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerialMail
    def ClassificationCh1IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def SerialMailStart(builder):
    builder.StartObject(4)

def Start(builder):
    SerialMailStart(builder)

def SerialMailAddInputsCh0(builder, inputsCh0):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(inputsCh0), 0)

def AddInputsCh0(builder, inputsCh0):
    SerialMailAddInputsCh0(builder, inputsCh0)

def SerialMailStartInputsCh0Vector(builder, numElems):
    return builder.StartVector(3, numElems, 1)

def StartInputsCh0Vector(builder, numElems):
    return SerialMailStartInputsCh0Vector(builder, numElems)

def SerialMailAddInputsCh1(builder, inputsCh1):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inputsCh1), 0)

def AddInputsCh1(builder, inputsCh1):
    SerialMailAddInputsCh1(builder, inputsCh1)

def SerialMailStartInputsCh1Vector(builder, numElems):
    return builder.StartVector(3, numElems, 1)

def StartInputsCh1Vector(builder, numElems):
    return SerialMailStartInputsCh1Vector(builder, numElems)

def SerialMailAddClassificationCh0(builder, classificationCh0):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationCh0), 0)

def AddClassificationCh0(builder, classificationCh0):
    SerialMailAddClassificationCh0(builder, classificationCh0)

def SerialMailStartClassificationCh0Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartClassificationCh0Vector(builder, numElems):
    return SerialMailStartClassificationCh0Vector(builder, numElems)

def SerialMailAddClassificationCh1(builder, classificationCh1):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationCh1), 0)

def AddClassificationCh1(builder, classificationCh1):
    SerialMailAddClassificationCh1(builder, classificationCh1)

def SerialMailStartClassificationCh1Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartClassificationCh1Vector(builder, numElems):
    return SerialMailStartClassificationCh1Vector(builder, numElems)

def SerialMailEnd(builder):
    return builder.EndObject()

def End(builder):
    return SerialMailEnd(builder)
